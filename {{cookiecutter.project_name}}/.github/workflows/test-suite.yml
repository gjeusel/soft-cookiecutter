---
name: Test Suite

on:
  push:
  pull_request:
    types: [opened, synchronize]

jobs:
  tests:
    name: {% raw %}"Python ${{ matrix.python-version }}"{% endraw %}
    runs-on: "ubuntu-latest"

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', ]
        python-version: ["3.8", "3.9", "3.10.0-beta.2"]

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v2

      - name: "setup python"
        uses: actions/setup-python@v2
        with:
          python-version: {% raw %}"${{ matrix.python-version }}"{% endraw %}

      {%- if cookiecutter.tool == 'poetry' %}
      - name: "Install poetry"
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: "Configure poetry"
        run: python -m poetry config virtualenvs.in-project true

      - name: "Set up cache"
        uses: actions/cache@v1
        id: cache
        with:
          path: .venv
          key: {% raw %}venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}{% endraw %}

      - name: "Ensure cache is healthy"
        if: steps.cache.outputs.cache-hit == 'true'
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: "Install Dependencies"
        run: poetry install

      - name: "Run tests"
        run: poetry run pytest

      - name: "Run linting"
        run: poetry run pre-commit run --all-files
      {%- endif %}

      - name: "Upload coverage"
        uses: codecov/codecov-action@v1
