{%- raw -%}

name: CI

on:
  push:
    branches:
      - main
    tags:
      - "**"
  pull_request: {}

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install Dependencies
        run: uv sync --all-extras

      - uses: actions/cache@v4
        id: cache
        with:
          path: |
            .mypy_cache
          key: >
            lint
            ${{ runner.os }}
            ${{ env.pythonLocation }}
            ${{ hashFiles('uv.lock') }}

      - name: uv run pre-commit
        run: uv run pre-commit run --all-files --show-diff-on-failure

  test:
    name: pytest - py${{ matrix.python-version }} - ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu] # [ubuntu, macos, windows]
        python-version: ["3.12"] # ["3.9", "3.10", "3.11", "3.12"]

    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}
      DEPS: yes

    runs-on: ${{ matrix.os }}-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install the project
        run: uv sync --all-extras

      - name: Test
        run: uv run coverage run -m pytest -vv
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}

      - name: Store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
          path: coverage
          include-hidden-files: true

  coverage-combine:
    name: coverage
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Get coverage files
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: coverage-*
          path: coverage

      - run: uv venv && uv pip install 'coverage[toml]'

      - run: ls -la coverage

      - run: uv run coverage combine coverage
      - run: uv run coverage report
      - run: uv run coverage html --show-contexts --title "{{ cookiecutter.project_name }} coverage for ${{ github.sha }}"

      - name: Store coverage html
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  docs:
    name: docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install Dependencies
        run: uv sync --extra doc

      - name: Build docs site
        run: uv run mkdocs build

      - name: Publish docs site
        if: "startsWith(github.ref, 'refs/tags/')"
        run: >
          uv run mkdocs gh-deploy --force
          --message "upt(doc): ${{ github.sha }}"
          --remote-branch=gh-pages

  publish-pypi:
    name: publish pypi
    needs: [lint, test, docs]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: build
        run: uv build

      - name: Upload to Pypi
        run: uv publish
        env:
          UV_PUBLISH_USERNAME: __token__
          UV_PUBLISH_PASSWORD: ${{ secrets.PYPI_TOKEN }}

{%- endraw %}
{%- if cookiecutter.dockerfile == 'yes' %}

  docker:
    runs-on: ubuntu-latest
    name: Docker
    if: github.ref == 'refs/heads/main'
    needs: [lint, test, docs]
    steps:
      - uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            {{cookiecutter.github_username}}/{{cookiecutter.project_name}}
            # ghcr.io/{% raw %}${{github.repository_owner}}{% endraw %}/botwit
          # generate Docker tags based on the following events/attributes
          {% raw -%}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=,suffix=,format=long
            type=raw,value=latest,enable={{is_default_branch}}
          {%- endraw %}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: {{ cookiecutter.github_username }}
          password: {% raw %}${{ secrets.DOCKERHUB_TOKEN }}{% endraw %}

      {% raw -%}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      {%- endraw -%}
{%- endif -%}
