[build-system]
requires = ["hatchling>=1.5.0", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch]
version = { source = "vcs" }

[project]
name = "{{ cookiecutter.project_name }}"
description = "{{ cookiecutter.project_short_description }}"
authors = [
  { name = "{{ cookiecutter.github_username }}", email = "{{ cookiecutter.github_username }}@gmail.com" },
]
readme = "README.md"
classifiers = [
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development",
]
requires-python = ">=3.12"
dynamic = ["version"]

dependencies = [
  # "pandas",
]

[project.optional-dependencies]
dev = [
  # types
  # "types-pytz",
  # "types-pyyaml",
  #
  # testing libs:
  "coverage==7.4.*",
  "pytest==8.1.*",
  "pytest-sugar==1.0.0",
  "pytest-mock==3.14.*",
  # "pytest-asyncio==0.23.*",
  # "dirty-equals",
  # "inline-snapshot",
  #
  # code quality:
  "pre-commit==3.7.*",
  "ruff>=0.6,<1.0",       # replacement of flake8 & associated
  "mypy==1.9.*",
  #
  # confort:
  "pdbpp",
  "ptpython",
  "rich",
  #
  # project templating:
  "cruft",
  "cookiecutter",
]

doc = [
  "mkdocs>=1.6",
  "mkdocstrings[python]>=0.26",
  "mkdocs-material>=9.5",
  "mkdocs-exclude>=1",
  "markdown-include>=0.8",
  "mdx-truly-sane-lists>=1",
]

all = [
  "{{ cookiecutter.project_name }}[dev]",
  "{{ cookiecutter.project_name }}[doc]",
]

nvim-lsp = [
  "python-lsp-server[rope]==1.*",
  "jedi==0.19.*",
  "pylsp-mypy==0.6.*",
]

[tool.ruff.lint]
select = [
  "E",    # pycodestyle
  "F",    # pyflakes
  "UP",   # pyupgrade
  "I",    # isort
  "PERF", # Perflint
  "S",    # flake8-bandit
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "TID",  # flake8-tidy-imports
  "ICN",  # flake8-import-conventions
  # "TCH",  # flake8-type-checking
  "RUF", # Ruff-specific rules
]

ignore = [
  "E501",   # pycodestyle line too long
  "B010",   # flake8-bugbear - do not call setattr with a constant attribute value
  "RUF012", # Ruff-specific rule - annotated with classvar
  "ISC001", # Ruff formatter incompatible
  "S608",   # flake8-bandit - Possible SQL injection vector through string-based query construction
  "B008",   # flake8-bugbear - contradict FastAPI
]

[tool.ruff.lint.flake8-import-conventions.aliases]
numpy = "np"
pandas = "pd"

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
  "pydantic.BaseModel",
  "sqlalchemy.orm.DeclarativeBase",
  "pandera.DataFrameModel",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"                 # Disallow all relative imports.
banned-module-level-imports = ["matplotlib"] # require a lazy import

[tool.ruff.lint.isort]
known-first-party = ["{{cookiecutter.project_slug}}", "tests"]

[tool.ruff.lint.per-file-ignores]
"{{cookiecutter.project_slug}}/**/__init__.py" = [
  "F401", # pyflakes - unused-import
]

"{{cookiecutter.project_slug}}/__init__.py" = [
  "E402", # Module level import not at top of file
]

"tests/**/*.*" = [
  "A",
  "ARG",
  "B",
  "BLE",
  "C901",
  "D",
  "DTZ",
  "EM",
  "FBT",
  "G",
  "N",
  "PGH",
  "PIE",
  "PLR",
  "PLW",
  "PTH",
  "RSE",
  "S",
  "S101",
  "SIM",
  # "TCH",
  "TRY",
]

[tool.pytest.ini_options]
testpaths = "tests"
# filterwarnings = ["error"]  # make the warnings act like exceptions
# addopts = "--cov --no-cov-on-fail"
# timeout = 10  # maximum seconds duration for a unittest
# asyncio_mode = "auto"  # when using pytest-asyncio
markers = ["stress: stress tests (deselect with '-m \"not stress\"')"]
filterwarnings = [
  # "action:message:category:module:line"
  #
  # distutils:
  "ignore:distutils Version classes are deprecated:DeprecationWarning",
]

[tool.coverage]
run = { source = [
  "{{ cookiecutter.project_slug }}",
], branch = true, omit = [
  "*tests/*",
], context = "${CONTEXT}" }
report = { precision = 2, exclude_lines = [
  "pragma: no cover",
  "raise NotImplementedError",
  "raise NotImplemented",
  "if TYPE_CHECKING:",
  "@overload",
], sort = "Miss" }

[tool.mypy]
python_version = "3.12"

# Rules can be found at:
# https://mypy.readthedocs.io/en/stable/config_file.html

strict = true
show_error_codes = true

# permissives rules:
implicit_reexport = true # no need to specify __all__ in modules
# follow_imports = "silent"  # does not work when using dmypy https://github.com/python/mypy/issues/9475
ignore_missing_imports = true # ignore missing stubs

[[tool.mypy.overrides]]
module = ["tests.*", "docs.*"]
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[tool.cruft]
skip = ["{{ cookiecutter.project_slug }}/__init__.py", "tests"]
